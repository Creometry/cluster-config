# The default namespace to be applied to resources. This field is not used to
# enforce or lock down the deployment to a specific namespace, but instead
# provide the default value of the namespace field if one is not specified
# in the manifests.
# Default: default
defaultNamespace: ingress-nginx

# All resources will be assigned to this namespace and if any cluster scoped
# resource exists the deployment will fail.
# Default: ""
namespace: ""

# namespaceLabels are labels that will be appended to the namespace created by Fleet.
# namespaceLabels:
#   key: value
# # namespaceAnnotations are annotations that will be appended to the namespace created by Fleet.
# namespaceAnnotations:
#   key: value

# # Optional map of labels, that are set at the bundle and can be used in a
# # dependsOn.selector
# labels:
#   key: value

# kustomize:
#   # Use a custom folder for kustomize resources. This folder must contain
#   # a kustomization.yaml file.
#   dir: ./kustomize

helm:
  # Use a custom location for the Helm chart. This can refer to any go-getter URL or
  # OCI registry based helm chart URL e.g. "oci://ghcr.io/fleetrepoci/guestbook".
  # This allows one to download charts from most any location.  Also know that
  # go-getter URL supports adding a digest to validate the download. If repo
  # is set below this field is the name of the chart to lookup
  chart: ingress-nginx
  # A https URL to a Helm repo to download the chart from. It's typically easier
  # to just use `chart` field and refer to a tgz file.  If repo is used the
  # value of `chart` will be used as the chart name to lookup in the Helm repository.
  repo: https://kubernetes.github.io/ingress-nginx
  # A custom release name to deploy the chart as. If not specified a release name
  # will be generated by combining the invoking GitRepo.name + GitRepo.path.
  releaseName: ingress-nginx
  # Makes helm skip the check for its own annotations
  takeOwnership: false
  # The version of the chart or semver constraint of the chart to find. If a constraint
  # is specified it is evaluated each time git changes.
  # The version also determines which chart to download from OCI registries.
  version: 4.7.1
  # Any values that should be placed in the `values.yaml` and passed to helm during
  # install.
  values:
    ## nginx configuration
    ## Ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/nginx-configuration/index.md
    ##

    ## Overrides for generated resource names
    # See templates/_helpers.tpl
    # nameOverride:
    # fullnameOverride:

    ## Labels to apply to all resources
    ##
    commonLabels: {}
    # scmhash: abc123
    # myLabel: aakkmd

    controller:
      name: controller
      image:
        ## Keep false as default for now!
        chroot: false
        registry: registry.k8s.io
        image: ingress-nginx/controller
        ## for backwards compatibility consider setting the full image url via the repository value below
        ## use *either* current default registry/image or repository format or installing chart by providing the values.yaml will fail
        ## repository:
        tag: "v1.8.1"
        digest: sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd
        digestChroot: sha256:e0d4121e3c5e39de9122e55e331a32d5ebf8d4d257227cb93ab54a1b912a7627
        pullPolicy: IfNotPresent
        # www-data -> uid 101
        runAsUser: 101
        allowPrivilegeEscalation: true
      # -- Use an existing PSP instead of creating one
      existingPsp: ""
      # -- Configures the controller container name
      containerName: controller
      # -- Configures the ports that the nginx-controller listens on
      containerPort:
        http: 80
        https: 443
      # -- Will add custom configuration options to Nginx https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/
      config: {}
      # -- Annotations to be added to the controller config configuration configmap.
      configAnnotations: {}
      # -- Will add custom headers before sending traffic to backends according to https://github.com/kubernetes/ingress-nginx/tree/main/docs/examples/customization/custom-headers
      proxySetHeaders: {}
      # -- Will add custom headers before sending response traffic to the client according to: https://kubernetes.github.io/ingress-nginx/user-guide/nginx-configuration/configmap/#add-headers
      addHeaders: {}
      # -- Optionally customize the pod dnsConfig.
      dnsConfig: {}
      # -- Optionally customize the pod hostname.
      hostname: {}
      # -- Optionally change this to ClusterFirstWithHostNet in case you have 'hostNetwork: true'.
      # By default, while using host network, name resolution uses the host's DNS. If you wish nginx-controller
      # to keep resolving names inside the k8s network, use ClusterFirstWithHostNet.
      dnsPolicy: ClusterFirst
      # -- Bare-metal considerations via the host network https://kubernetes.github.io/ingress-nginx/deploy/baremetal/#via-the-host-network
      # Ingress status was blank because there is no Service exposing the Ingress-Nginx Controller in a configuration using the host network, the default --publish-service flag used in standard cloud setups does not apply
      reportNodeInternalIp: false
      # -- Process Ingress objects without ingressClass annotation/ingressClassName field
      # Overrides value for --watch-ingress-without-class flag of the controller binary
      # Defaults to false
      watchIngressWithoutClass: false
      # -- Process IngressClass per name (additionally as per spec.controller).
      ingressClassByName: false
      # -- This configuration enables Topology Aware Routing feature, used together with service annotation service.kubernetes.io/topology-aware-hints="auto"
      # Defaults to false
      enableTopologyAwareRouting: false
      # -- This configuration defines if Ingress Controller should allow users to set
      # their own *-snippet annotations, otherwise this is forbidden / dropped
      # when users add those annotations.
      # Global snippets in ConfigMap are still respected
      allowSnippetAnnotations: true
      # -- Required for use with CNI based kubernetes installations (such as ones set up by kubeadm),
      # since CNI and hostport don't mix yet. Can be deprecated once https://github.com/kubernetes/kubernetes/issues/23920
      # is merged
      hostNetwork: false
      ## Use host ports 80 and 443
      ## Disabled by default
      hostPort:
        # -- Enable 'hostPort' or not
        enabled: false
        ports:
          # -- 'hostPort' http port
          http: 80
          # -- 'hostPort' https port
          https: 443
      # -- Election ID to use for status update, by default it uses the controller name combined with a suffix of 'leader'
      electionID: ""
      ## This section refers to the creation of the IngressClass resource
      ## IngressClass resources are supported since k8s >= 1.18 and required since k8s >= 1.19
      ingressClassResource:
        # -- Name of the ingressClass
        name: nginx
        # -- Is this ingressClass enabled or not
        enabled: true
        # -- Is this the default ingressClass for the cluster
        default: true
        # -- Controller-value of the controller that is processing this ingressClass
        controllerValue: "k8s.io/ingress-nginx"
        # -- Parameters is a link to a custom resource containing additional
        # configuration for the controller. This is optional if the controller
        # does not require extra parameters.
        parameters: {}
      # -- For backwards compatibility with ingress.class annotation, use ingressClass.
      # Algorithm is as follows, first ingressClassName is considered, if not present, controller looks for ingress.class annotation
      ingressClass: nginx
      # -- Labels to add to the pod container metadata
      podLabels: {}
      #  key: value

      # -- Security Context policies for controller pods
      podSecurityContext: {}
      # -- See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for notes on enabling and using sysctls
      sysctls: {}
      # sysctls:
      #   "net.core.somaxconn": "8192"

      # -- Allows customization of the source of the IP address or FQDN to report
      # in the ingress status field. By default, it reads the information provided
      # by the service. If disable, the status field reports the IP address of the
      # node or nodes where an ingress controller pod is running.
      publishService:
        # -- Enable 'publishService' or not
        enabled: true
        # -- Allows overriding of the publish service to bind to
        # Must be <namespace>/<service_name>
        pathOverride: ""
      # Limit the scope of the controller to a specific namespace
      scope:
        # -- Enable 'scope' or not
        enabled: false
        # -- Namespace to limit the controller to; defaults to $(POD_NAMESPACE)
        namespace: ""
        # -- When scope.enabled == false, instead of watching all namespaces, we watching namespaces whose labels
        # only match with namespaceSelector. Format like foo=bar. Defaults to empty, means watching all namespaces.
        namespaceSelector: ""
      # -- Allows customization of the configmap / nginx-configmap namespace; defaults to $(POD_NAMESPACE)
      configMapNamespace: ""
      tcp:
        # -- Allows customization of the tcp-services-configmap; defaults to $(POD_NAMESPACE)
        configMapNamespace: ""
        # -- Annotations to be added to the tcp config configmap
        annotations: {}
      udp:
        # -- Allows customization of the udp-services-configmap; defaults to $(POD_NAMESPACE)
        configMapNamespace: ""
        # -- Annotations to be added to the udp config configmap
        annotations: {}
      # -- Maxmind license key to download GeoLite2 Databases.
      ## https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases
      maxmindLicenseKey: ""
      # -- Additional command line arguments to pass to Ingress-Nginx Controller
      # E.g. to specify the default SSL certificate you can use
      extraArgs: {}
      ## extraArgs:
      ##   default-ssl-certificate: "<namespace>/<secret_name>"

      # -- Additional environment variables to set
      extraEnvs: []
      # extraEnvs:
      #   - name: FOO
      #     valueFrom:
      #       secretKeyRef:
      #         key: FOO
      #         name: secret-resource

      # -- Use a `DaemonSet` or `Deployment`
      kind: Deployment
      # -- Annotations to be added to the controller Deployment or DaemonSet
      ##
      annotations: {}
      #  keel.sh/pollSchedule: "@every 60m"

      # -- Labels to be added to the controller Deployment or DaemonSet and other resources that do not have option to specify labels
      ##
      labels: {}
      #  keel.sh/policy: patch
      #  keel.sh/trigger: poll

      # -- The update strategy to apply to the Deployment or DaemonSet
      ##
      updateStrategy: 
       rollingUpdate:
         maxUnavailable: 1
       type: RollingUpdate

      # -- `minReadySeconds` to avoid killing pods before we are ready
      ##
      minReadySeconds: 0
      # -- Node tolerations for server scheduling to nodes with taints
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
      ##
      tolerations: []
      #  - key: "key"
      #    operator: "Equal|Exists"
      #    value: "value"
      #    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

      # -- Affinity and anti-affinity rules for server scheduling to nodes
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
      ##
      affinity: {}
      # # An example of preferred pod anti-affinity, weight is in the range 1-100
      # podAntiAffinity:
      #   preferredDuringSchedulingIgnoredDuringExecution:
      #   - weight: 100
      #     podAffinityTerm:
      #       labelSelector:
      #         matchExpressions:
      #         - key: app.kubernetes.io/name
      #           operator: In
      #           values:
      #           - ingress-nginx
      #         - key: app.kubernetes.io/instance
      #           operator: In
      #           values:
      #           - ingress-nginx
      #         - key: app.kubernetes.io/component
      #           operator: In
      #           values:
      #           - controller
      #       topologyKey: kubernetes.io/hostname

      # # An example of required pod anti-affinity
      # podAntiAffinity:
      #   requiredDuringSchedulingIgnoredDuringExecution:
      #   - labelSelector:
      #       matchExpressions:
      #       - key: app.kubernetes.io/name
      #         operator: In
      #         values:
      #         - ingress-nginx
      #       - key: app.kubernetes.io/instance
      #         operator: In
      #         values:
      #         - ingress-nginx
      #       - key: app.kubernetes.io/component
      #         operator: In
      #         values:
      #         - controller
      #     topologyKey: "kubernetes.io/hostname"

      # -- Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.
      ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
      ##
      topologySpreadConstraints: []
      # - maxSkew: 1
      #   topologyKey: topology.kubernetes.io/zone
      #   whenUnsatisfiable: DoNotSchedule
      #   labelSelector:
      #     matchLabels:
      #       app.kubernetes.io/instance: ingress-nginx-internal

      # -- `terminationGracePeriodSeconds` to avoid killing pods before we are ready
      ## wait up to five minutes for the drain of connections
      ##
      terminationGracePeriodSeconds: 300
      # -- Node labels for controller pod assignment
      ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
      ##
      nodeSelector:
        kubernetes.io/os: linux
      ## Liveness and readiness probe values
      ## Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#container-probes
      ##
      startupProbe:
        httpGet:
          # should match container.healthCheckPath
          path: "/healthz"
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 5
        timeoutSeconds: 2
        successThreshold: 1
        failureThreshold: 5
      livenessProbe:
        httpGet:
          # should match container.healthCheckPath
          path: "/healthz"
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 5
      readinessProbe:
        httpGet:
          # should match container.healthCheckPath
          path: "/healthz"
          port: 10254
          scheme: HTTP
        initialDelaySeconds: 10
        periodSeconds: 10
        timeoutSeconds: 1
        successThreshold: 1
        failureThreshold: 3
      # -- Path of the health check endpoint. All requests received on the port defined by
      # the healthz-port parameter are forwarded internally to this path.
      healthCheckPath: "/healthz"
      # -- Address to bind the health check endpoint.
      # It is better to set this option to the internal node address
      # if the Ingress-Nginx Controller is running in the `hostNetwork: true` mode.
      healthCheckHost: ""
      # -- Annotations to be added to controller pods
      ##
      podAnnotations: {}
      replicaCount: 1
      # -- Minimum available pods set in PodDisruptionBudget.
      # Define either 'minAvailable' or 'maxUnavailable', never both.
      minAvailable: 1
      # -- Maximum unavalaile pods set in PodDisruptionBudget. If set, 'minAvailable' is ignored.
      maxUnavailable: 1

      ## Define requests resources to avoid probe issues due to CPU utilization in busy nodes
      ## ref: https://github.com/kubernetes/ingress-nginx/issues/4735#issuecomment-551204903
      ## Ideally, there should be no limits.
      ## https://engineering.indeedblog.com/blog/2019/12/cpu-throttling-regression-fix/
      resources:
        ##  limits:
        ##    cpu: 100m
        ##    memory: 90Mi
        requests:
          cpu: 100m
          memory: 90Mi
      # Mutually exclusive with keda autoscaling
      autoscaling:
        enabled: True
        annotations: {}
        minReplicas: 1
        maxReplicas: 3
        targetCPUUtilizationPercentage: 50
        targetMemoryUtilizationPercentage: 50
        behavior: {}
        # scaleDown:
        #   stabilizationWindowSeconds: 300
        #   policies:
        #   - type: Pods
        #     value: 1
        #     periodSeconds: 180
        # scaleUp:
        #   stabilizationWindowSeconds: 300
        #   policies:
        #   - type: Pods
        #     value: 2
        #     periodSeconds: 60
      autoscalingTemplate: []
      # Custom or additional autoscaling metrics
      # ref: https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/#support-for-custom-metrics
      # - type: Pods
      #   pods:
      #     metric:
      #       name: nginx_ingress_controller_nginx_process_requests_total
      #     target:
      #       type: AverageValue
      #       averageValue: 10000m

      # Mutually exclusive with hpa autoscaling
      keda:
        apiVersion: "keda.sh/v1alpha1"
        ## apiVersion changes with keda 1.x vs 2.x
        ## 2.x = keda.sh/v1alpha1
        ## 1.x = keda.k8s.io/v1alpha1
        enabled: false
        minReplicas: 1
        maxReplicas: 11
        pollingInterval: 30
        cooldownPeriod: 300
        # fallback:
        #   failureThreshold: 3
        #   replicas: 11
        restoreToOriginalReplicaCount: false
        scaledObject:
          annotations: {}
          # Custom annotations for ScaledObject resource
          #  annotations:
          # key: value
        triggers: []
        # - type: prometheus
        #   metadata:
        #     serverAddress: http://<prometheus-host>:9090
        #     metricName: http_requests_total
        #     threshold: '100'
        #     query: sum(rate(http_requests_total{deployment="my-deployment"}[2m]))

        behavior: {}
        # scaleDown:
        #   stabilizationWindowSeconds: 300
        #   policies:
        #   - type: Pods
        #     value: 1
        #     periodSeconds: 180
        # scaleUp:
        #   stabilizationWindowSeconds: 300
        #   policies:
        #   - type: Pods
        #     value: 2
        #     periodSeconds: 60
      # -- Enable mimalloc as a drop-in replacement for malloc.
      ## ref: https://github.com/microsoft/mimalloc
      ##
      enableMimalloc: true
      ## Override NGINX template
      customTemplate:
        configMapName: ""
        configMapKey: ""
      service:
        enabled: true
        # -- If enabled is adding an appProtocol option for Kubernetes service. An appProtocol field replacing annotations that were
        # using for setting a backend protocol. Here is an example for AWS: service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
        # It allows choosing the protocol for each backend specified in the Kubernetes service.
        # See the following GitHub issue for more details about the purpose: https://github.com/kubernetes/kubernetes/issues/40244
        # Will be ignored for Kubernetes versions older than 1.20
        ##
        appProtocol: true
        annotations: {}
        labels: {}
        # clusterIP: ""

        # -- List of IP addresses at which the controller services are available
        ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#external-ips
        ##
        externalIPs: []
        # -- Used by cloud providers to connect the resulting `LoadBalancer` to a pre-existing static IP according to https://kubernetes.io/docs/concepts/services-networking/service/#loadbalancer
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        # -- Used by cloud providers to select a load balancer implementation other than the cloud provider default. https://kubernetes.io/docs/concepts/services-networking/service/#load-balancer-class
        loadBalancerClass: ""
        enableHttp: true
        enableHttps: true
        ## Set external traffic policy to: "Local" to preserve source IP on providers supporting it.
        ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
        # externalTrafficPolicy: ""

        ## Must be either "None" or "ClientIP" if set. Kubernetes will default to "None".
        ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
        # sessionAffinity: ""

        ## Specifies the health check node port (numeric port number) for the service. If healthCheckNodePort isn’t specified,
        ## the service controller allocates a port from your cluster’s NodePort range.
        ## Ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
        # healthCheckNodePort: 0

        # -- Represents the dual-stack-ness requested or required by this Service. Possible values are
        # SingleStack, PreferDualStack or RequireDualStack.
        # The ipFamilies and clusterIPs fields depend on the value of this field.
        ## Ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/
        ipFamilyPolicy: "SingleStack"
        # -- List of IP families (e.g. IPv4, IPv6) assigned to the service. This field is usually assigned automatically
        # based on cluster configuration and the ipFamilyPolicy field.
        ## Ref: https://kubernetes.io/docs/concepts/services-networking/dual-stack/
        ipFamilies:
          - IPv4
        ports:
          http: 80
          https: 443
        targetPorts:
          http: http
          https: https
        type: LoadBalancer
        ## type: NodePort
        ## nodePorts:
        ##   http: 32080
        ##   https: 32443
        ##   tcp:
        ##     8080: 32808
        nodePorts:
          http: ""
          https: ""
          tcp: {}
          udp: {}
        external:
          enabled: true
        internal:
          # -- Enables an additional internal load balancer (besides the external one).
          enabled: false
          # -- Annotations are mandatory for the load balancer to come up. Varies with the cloud service.
          annotations: {}
          # -- Used by cloud providers to connect the resulting internal LoadBalancer to a pre-existing static IP. Make sure to add to the service the needed annotation to specify the subnet which the static IP belongs to. For instance, `networking.gke.io/internal-load-balancer-subnet` for GCP and `service.beta.kubernetes.io/aws-load-balancer-subnets` for AWS.
          loadBalancerIP: ""
          # -- Restrict access For LoadBalancer service. Defaults to 0.0.0.0/0.
          loadBalancerSourceRanges: []
          ## Set external traffic policy to: "Local" to preserve source IP on
          ## providers supporting it
          ## Ref: https://kubernetes.io/docs/tutorials/services/source-ip/#source-ip-for-services-with-typeloadbalancer
          # externalTrafficPolicy: ""

          # -- Custom port mapping for internal service
          ports: {}
          #  http: 80
          #  https: 443

          # -- Custom target port mapping for internal service
          targetPorts: {}
          #  http: http
          #  https: https
      # shareProcessNamespace enables process namespace sharing within the pod.
      # This can be used for example to signal log rotation using `kill -USR1` from a sidecar.
      shareProcessNamespace: false
      # -- Additional containers to be added to the controller pod.
      # See https://github.com/lemonldap-ng-controller/lemonldap-ng-controller as example.
      extraContainers: []
      #  - name: my-sidecar
      #    image: nginx:latest
      #  - name: lemonldap-ng-controller
      #    image: lemonldapng/lemonldap-ng-controller:0.2.0
      #    args:
      #      - /lemonldap-ng-controller
      #      - --alsologtostderr
      #      - --configmap=$(POD_NAMESPACE)/lemonldap-ng-configuration
      #    env:
      #      - name: POD_NAME
      #        valueFrom:
      #          fieldRef:
      #            fieldPath: metadata.name
      #      - name: POD_NAMESPACE
      #        valueFrom:
      #          fieldRef:
      #            fieldPath: metadata.namespace
      #    volumeMounts:
      #    - name: copy-portal-skins
      #      mountPath: /srv/var/lib/lemonldap-ng/portal/skins

      # -- Additional volumeMounts to the controller main container.
      extraVolumeMounts: []
      #  - name: copy-portal-skins
      #   mountPath: /var/lib/lemonldap-ng/portal/skins

      # -- Additional volumes to the controller pod.
      extraVolumes: []
      #  - name: copy-portal-skins
      #    emptyDir: {}

      # -- Containers, which are run before the app containers are started.
      extraInitContainers: []
      # - name: init-myservice
      #   image: busybox
      #   command: ['sh', '-c', 'until nslookup myservice; do echo waiting for myservice; sleep 2; done;']

      # -- Modules, which are mounted into the core nginx image. See values.yaml for a sample to add opentelemetry module
      extraModules: []
      # - name: mytestmodule
      #   image: registry.k8s.io/ingress-nginx/mytestmodule
      #   containerSecurityContext:
      #     allowPrivilegeEscalation: false
      #
      # The image must contain a `/usr/local/bin/init_module.sh` executable, which
      # will be executed as initContainers, to move its config files within the
      # mounted volume.

      opentelemetry:
        enabled: false
        image: registry.k8s.io/ingress-nginx/opentelemetry:v20230527@sha256:fd7ec835f31b7b37187238eb4fdad4438806e69f413a203796263131f4f02ed0
        containerSecurityContext:
          allowPrivilegeEscalation: false
      admissionWebhooks:
        annotations: {}
        # ignore-check.kube-linter.io/no-read-only-rootfs: "This deployment needs write access to root filesystem".

        ## Additional annotations to the admission webhooks.
        ## These annotations will be added to the ValidatingWebhookConfiguration and
        ## the Jobs Spec of the admission webhooks.
        enabled: true
        # -- Additional environment variables to set
        extraEnvs: []
        # extraEnvs:
        #   - name: FOO
        #     valueFrom:
        #       secretKeyRef:
        #         key: FOO
        #         name: secret-resource
        # -- Admission Webhook failure policy to use
        failurePolicy: Fail
        # timeoutSeconds: 10
        port: 8443
        certificate: "/usr/local/certificates/cert"
        key: "/usr/local/certificates/key"
        namespaceSelector: {}
        objectSelector: {}
        # -- Labels to be added to admission webhooks
        labels: {}
        # -- Use an existing PSP instead of creating one
        existingPsp: ""
        networkPolicyEnabled: false
        service:
          annotations: {}
          # clusterIP: ""
          externalIPs: []
          # loadBalancerIP: ""
          loadBalancerSourceRanges: []
          servicePort: 443
          type: ClusterIP
        createSecretJob:
          securityContext:
            allowPrivilegeEscalation: false
          resources: 
            limits:
              cpu: 10m
              memory: 20Mi
            requests:
              cpu: 1m
              memory: 2Mi
        patchWebhookJob:
          securityContext:
            allowPrivilegeEscalation: false
          resources: {}
        patch:
          enabled: true
          image:
            registry: registry.k8s.io
            image: ingress-nginx/kube-webhook-certgen
            ## for backwards compatibility consider setting the full image url via the repository value below
            ## use *either* current default registry/image or repository format or installing chart by providing the values.yaml will fail
            ## repository:
            tag: v20230407
            digest: sha256:543c40fd093964bc9ab509d3e791f9989963021f1e9e4c9c7b6700b02bfb227b
            pullPolicy: IfNotPresent
          # -- Provide a priority class name to the webhook patching job
          ##
          priorityClassName: ""
          podAnnotations: {}
          nodeSelector:
            kubernetes.io/os: linux
          tolerations: []
          # -- Labels to be added to patch job resources
          labels: {}
          securityContext:
            runAsNonRoot: true
            runAsUser: 2000
            fsGroup: 2000
        # Use certmanager to generate webhook certs
        certManager:
          enabled: false
          # self-signed root certificate
          rootCert:
            # default to be 5y
            duration: ""
          admissionCert:
            # default to be 1y
            duration: ""
            issuerRef:
              name: "letsencrypt-prod"
              kind: "ClusterIssuer"
      metrics:
        port: 10254
        portName: metrics
        # if this port is changed, change healthz-port: in extraArgs: accordingly
        enabled: true
        service:
          annotations: 
            prometheus.io/scrape: "true"
            prometheus.io/port: "10254"
          # -- Labels to be added to the metrics service resource
          labels: {}
          # clusterIP: ""

          # -- List of IP addresses at which the stats-exporter service is available
          ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#external-ips
          ##
          externalIPs: []
          # loadBalancerIP: ""
          loadBalancerSourceRanges: []
          servicePort: 10254
          type: ClusterIP
          # externalTrafficPolicy: ""
          # nodePort: ""
        serviceMonitor:
          enabled: true
          additionalLabels: {}
          ## The label to use to retrieve the job name from.
          ## jobLabel: "app.kubernetes.io/name"
          namespace: ingress-nginx
          namespaceSelector: {}
          ## Default: scrape .Release.Namespace only
          ## To scrape all, use the following:
          ## namespaceSelector:
          ##   any: true
          scrapeInterval: 30s
          # honorLabels: true
          targetLabels: []
          relabelings: []
          metricRelabelings: []
        prometheusRule:
          enabled: true
          additionalLabels: {}
          # namespace: ""
          rules: 
          # # These are just examples rules, please adapt them to your needs
          - alert: NGINXConfigFailed
            expr: count(nginx_ingress_controller_config_last_reload_successful == 0) > 0
            for: 1s
            labels:
              severity: critical
            annotations:
              description: bad ingress config - nginx config test failed
              summary: uninstall the latest ingress changes to allow config reloads to resume
          - alert: NGINXCertificateExpiry
            expr: (avg(nginx_ingress_controller_ssl_expire_time_seconds) by (host) - time()) < 604800
            for: 1s
            labels:
              severity: critical
            annotations:
              description: ssl certificate(s) will expire in less then a week
              summary: renew expiring certificates to avoid downtime
          - alert: NGINXTooMany500s
            expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"5.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
            for: 1m
            labels:
              severity: warning
            annotations:
              description: Too many 5XXs
              summary: More than 5% of all requests returned 5XX, this requires your attention
          - alert: NGINXTooMany400s
            expr: 100 * ( sum( nginx_ingress_controller_requests{status=~"4.+"} ) / sum(nginx_ingress_controller_requests) ) > 5
            for: 1m
            labels:
              severity: warning
            annotations:
              description: Too many 4XXs
              summary: More than 5% of all requests returned 4XX, this requires your attention
      # -- Improve connection draining when ingress controller pod is deleted using a lifecycle hook:
      # With this new hook, we increased the default terminationGracePeriodSeconds from 30 seconds
      # to 300, allowing the draining of connections up to five minutes.
      # If the active connections end before that, the pod will terminate gracefully at that time.
      # To effectively take advantage of this feature, the Configmap feature
      # worker-shutdown-timeout new value is 240s instead of 10s.
      ##
      lifecycle:
        preStop:
          exec:
            command:
              - /wait-shutdown
      priorityClassName: ""
    # -- Rollback limit
    ##
    revisionHistoryLimit: 10
    ## Default 404 backend
    ##
    defaultBackend:
      ##
      enabled: false
      name: defaultbackend
      image:
        registry: registry.k8s.io
        image: defaultbackend-amd64
        ## for backwards compatibility consider setting the full image url via the repository value below
        ## use *either* current default registry/image or repository format or installing chart by providing the values.yaml will fail
        ## repository:
        tag: "1.5"
        pullPolicy: IfNotPresent
        # nobody user -> uid 65534
        runAsUser: 65534
        runAsNonRoot: true
        readOnlyRootFilesystem: true
        allowPrivilegeEscalation: false
      # -- Use an existing PSP instead of creating one
      existingPsp: ""
      extraArgs: {}
      serviceAccount:
        create: true
        name: ""
        automountServiceAccountToken: true
      # -- Additional environment variables to set for defaultBackend pods
      extraEnvs: []
      port: 8080
      ## Readiness and liveness probes for default backend
      ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
      ##
      livenessProbe:
        failureThreshold: 3
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      readinessProbe:
        failureThreshold: 6
        initialDelaySeconds: 0
        periodSeconds: 5
        successThreshold: 1
        timeoutSeconds: 5
      # -- The update strategy to apply to the Deployment or DaemonSet
      ##
      updateStrategy: {}
      #  rollingUpdate:
      #    maxUnavailable: 1
      #  type: RollingUpdate

      # -- `minReadySeconds` to avoid killing pods before we are ready
      ##
      minReadySeconds: 0
      # -- Node tolerations for server scheduling to nodes with taints
      ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
      ##
      tolerations: []
      #  - key: "key"
      #    operator: "Equal|Exists"
      #    value: "value"
      #    effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

      affinity: {}
      # -- Security Context policies for controller pods
      # See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for
      # notes on enabling and using sysctls
      ##
      podSecurityContext: {}
      # -- Security Context policies for controller main container.
      # See https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/ for
      # notes on enabling and using sysctls
      ##
      containerSecurityContext: {}
      # -- Labels to add to the pod container metadata
      podLabels: {}
      #  key: value

      # -- Node labels for default backend pod assignment
      ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
      ##
      nodeSelector:
        kubernetes.io/os: linux
      # -- Annotations to be added to default backend pods
      ##
      podAnnotations: {}
      replicaCount: 1
      minAvailable: 1
      resources: {}
      # limits:
      #   cpu: 10m
      #   memory: 20Mi
      # requests:
      #   cpu: 10m
      #   memory: 20Mi

      extraVolumeMounts: []
      ## Additional volumeMounts to the default backend container.
      #  - name: copy-portal-skins
      #   mountPath: /var/lib/lemonldap-ng/portal/skins

      extraVolumes: []
      ## Additional volumes to the default backend pod.
      #  - name: copy-portal-skins
      #    emptyDir: {}

      autoscaling:
        annotations: {}
        enabled: false
        minReplicas: 1
        maxReplicas: 2
        targetCPUUtilizationPercentage: 50
        targetMemoryUtilizationPercentage: 50
      service:
        annotations: {}
        # clusterIP: ""

        # -- List of IP addresses at which the default backend service is available
        ## Ref: https://kubernetes.io/docs/concepts/services-networking/service/#external-ips
        ##
        externalIPs: []
        # loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 80
        type: ClusterIP
      priorityClassName: ""
      # -- Labels to be added to the default backend resources
      labels: {}
    ## Enable RBAC as per https://github.com/kubernetes/ingress-nginx/blob/main/docs/deploy/rbac.md and https://github.com/kubernetes/ingress-nginx/issues/266
    rbac:
      create: true
      scope: false
    ## If true, create & use Pod Security Policy resources
    ## https://kubernetes.io/docs/concepts/policy/pod-security-policy/
    podSecurityPolicy:
      enabled: false
    serviceAccount:
      create: true
      name: ""
      automountServiceAccountToken: true
      # -- Annotations for the controller service account
      annotations: {}
    # -- Optional array of imagePullSecrets containing private registry credentials
    ## Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    imagePullSecrets: []
    # - name: secretName

    # -- TCP service key-value pairs
    ## Ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/exposing-tcp-udp-services.md
    ##
    tcp: {}
    #  8080: "default/example-tcp-svc:9000"

    # -- UDP service key-value pairs
    ## Ref: https://github.com/kubernetes/ingress-nginx/blob/main/docs/user-guide/exposing-tcp-udp-services.md
    ##
    udp: {}
    #  53: "kube-system/kube-dns:53"

    # -- Prefix for TCP and UDP ports names in ingress controller service
    ## Some cloud providers, like Yandex Cloud may have a requirements for a port name regex to support cloud load balancer integration
    portNamePrefix: ""
    # -- (string) A base64-encoded Diffie-Hellman parameter.
    # This can be generated with: `openssl dhparam 4096 2> /dev/null | base64`
    ## Ref: https://github.com/kubernetes/ingress-nginx/tree/main/docs/examples/customization/ssl-dh-param
    dhParam: ""



#     any-custom: value
#   # All labels on Rancher clusters are available using global.fleet.clusterLabels.LABELNAME
#   # These can now be accessed directly as variables
#   # The variable's value will be an empty string if the referenced cluster label does not
#   # exist on the targeted cluster
#     variableName: global.fleet.clusterLabels.LABELNAME
#   # It is possible to specify the keys and values as go template strings for
#   # advanced templating needs. Most of the functions from the sprig templating
#   # library are available. Note, if the functions output changes with every
#   # call, e.g. `uuidv4`, the bundle will get redeployed.
#   # The template context has following keys.
#   # `.ClusterValues` are retrieved from target cluster's `spec.templateValues`
#   # `.ClusterLabels` and `.ClusterAnnotations` are the labels and annoations in the cluster resource.
#   # `.ClusterName` as the fleet's cluster resource name.
#   # `.ClusterNamespace` as the namespace in which the cluster resource exists.
#   # Note: The fleet.yaml must be valid yaml. Templating uses ${ } as delims,
#   #       unlike helm which uses {{ }}.
#     templatedLabel: "${ .ClusterLabels.LABELNAME }-foo"
#     valueFromEnv:
#       "${ .ClusterLabels.ENV }": ${ .ClusterValues.someValue | upper | quote }
#   # Path to any values files that need to be passed to helm during install
#   valuesFiles:
#     - values1.yaml
#     - values2.yaml
#   # Allow to use values files from configmaps or secrets defined in the downstream clusters
#   valuesFrom:
#   - configMapKeyRef:
#       name: configmap-values
#       # default to namespace of bundle
#       namespace: default
#       key: values.yaml
#   - secretKeyRef:
#       name: secret-values
#       namespace: default
#       key: values.yaml
#   # Override immutable resources. This could be dangerous.
#   force: false
#   # Set the Helm --atomic flag when upgrading
#   atomic: false
#   # Disable go template pre-processing on the fleet values
#   disablePreProcess: false
#   # if set and timeoutSeconds provided, will wait until all Jobs have been completed before marking the GitRepo as ready.
#   # It will wait for as long as timeoutSeconds
#   waitForJobs: true

# # A paused bundle will not update downstream clusters but instead mark the bundle
# # as OutOfSync. One can then manually confirm that a bundle should be deployed to
# # the downstream clusters.
# # Default: false
# paused: false

# rolloutStrategy:
#     # A number or percentage of clusters that can be unavailable during an update
#     # of a bundle. This follows the same basic approach as a deployment rollout
#     # strategy. Once the number of clusters meets unavailable state update will be
#     # paused. Default value is 100% which doesn't take effect on update.
#     # default: 100%
#     maxUnavailable: 15%
#     # A number or percentage of cluster partitions that can be unavailable during
#     # an update of a bundle.
#     # default: 0
#     maxUnavailablePartitions: 20%
#     # A number of percentage of how to automatically partition clusters if not
#     # specific partitioning strategy is configured.
#     # default: 25%
#     autoPartitionSize: 10%
#     # A list of definitions of partitions.  If any target clusters do not match
#     # the configuration they are added to partitions at the end following the
#     # autoPartitionSize.
#     partitions:
#       # A user friend name given to the partition used for Display (optional).
#       # default: ""
#     - name: canary
#       # A number or percentage of clusters that can be unavailable in this
#       # partition before this partition is treated as done.
#       # default: 10%
#       maxUnavailable: 10%
#       # Selector matching cluster labels to include in this partition
#       clusterSelector:
#         matchLabels:
#           env: prod
#       # A cluster group name to include in this partition
#       clusterGroup: agroup
#       # Selector matching cluster group labels to include in this partition
#       clusterGroupSelector:
#         clusterSelector:
#           matchLabels:
#             env: prod

# # Target customization are used to determine how resources should be modified per target
# # Targets are evaluated in order and the first one to match a cluster is used for that cluster.
# targetCustomizations:
# # The name of target. If not specified a default name of the format "target000"
# # will be used. This value is mostly for display
# - name: prod
#   # Custom namespace value overriding the value at the root
#   namespace: newvalue
#   # Custom defaultNamespace value overriding the value at the root
#   defaultNamespace: newdefaultvalue
#   # Custom kustomize options overriding the options at the root
#   kustomize: {}
#   # Custom Helm options override the options at the root
#   helm: {}
#   # If using raw YAML these are names that map to overlays/{name} that will be used
#   # to replace or patch a resource. If you wish to customize the file ./subdir/resource.yaml
#   # then a file ./overlays/myoverlay/subdir/resource.yaml will replace the base file.
#   # A file named ./overlays/myoverlay/subdir/resource_patch.yaml will patch the base file.
#   # A patch can in JSON Patch or JSON Merge format or a strategic merge patch for builtin
#   # Kubernetes types. Refer to "Raw YAML Resource Customization" below for more information.
#   yaml:
#     overlays:
#     - custom2
#     - custom3
#   # A selector used to match clusters.  The structure is the standard
#   # metav1.LabelSelector format. If clusterGroupSelector or clusterGroup is specified,
#   # clusterSelector will be used only to further refine the selection after
#   # clusterGroupSelector and clusterGroup is evaluated.
#   clusterSelector:
#     matchLabels:
#       env: prod
#   # A selector used to match a specific cluster by name. When using Fleet in
#   # Rancher, make sure to put the name of the clusters.fleet.cattle.io resource.
#   clusterName: dev-cluster
#   # A selector used to match cluster groups.
#   clusterGroupSelector:
#     matchLabels:
#       region: us-east
#   # A specific clusterGroup by name that will be selected
#   clusterGroup: group1
#   # Resources will not be deployed in the matched clusters if doNotDeploy is true.
#   doNotDeploy: false

# # dependsOn allows you to configure dependencies to other bundles. The current bundle
# # will only be deployed, after all dependencies are deployed and in a Ready state.
# dependsOn:
#   # Format: <GITREPO-NAME>-<BUNDLE_PATH> with all path separators replaced by "-"
#   # Example: GitRepo name "one", Bundle path "/multi-cluster/hello-world" => "one-multi-cluster-hello-world"
#   # Note: Bundle names are limited to 53 characters long. If longer they will be shortened:
#   # opni-fleet-examples-fleets-opni-ui-plugin-operator-crd becomes opni-fleet-examples-fleets-opni-ui-plugin-opera-021f7
#   - name: one-multi-cluster-hello-world
#   # Select bundles to depend on based on their label.
#   - selector:
#       matchLabels:
#         app: weak-monkey

# # Ignore fields when monitoring a Bundle. This can be used when Fleet thinks some conditions in Custom Resources
# # makes the Bundle to be in an error state when it shouldn't.
# ignore:
#   # Conditions to be ignored
#   conditions:
#   # In this example a condition will be ignored if it contains {"type": "Active", "status", "False"}
#   - type: Active
#     status: "False"

# # Override targets defined in the GitRepo. The Bundle will not have any targets from the GitRepo if overrideTargets is provided.
# overrideTargets:
#   - clusterSelector:
#       matchLabels:
#         env: dev
